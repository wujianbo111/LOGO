C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DEBUG
OBJECT MODULE PLACED IN .\obj\Debug.obj
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE ..\..\KERNEL\SYSTEM\Debug.c OPTIMIZE(SIZE) BROWSE INCDIR(..\..\DRIVER\INC;
                    -..\..\KERNEL\SCALER\INC;..\..\KERNEL\SYSTEM\INC;..\..\LIB\INC;..\..\PANEL\INC;..\..\BOARD;..\..\DRIVER\INC;..\..\KERNEL\
                    -SYSTEM\INC\AOC2011;..\..\DRIVER\extDEVICE\INC;..\..\MODEL;..\..\CONFIG;..\..\PANEL;..\..\UI\F_LOGO\INC;..\..\UI\HkcOsd\I
                    -NC) DEFINE(ModelName=JRY_TESTBOARD_C_BOARD) DEBUG OBJECTEXTEND PRINT(.\list\Debug.lst) OBJECT(.\obj\Debug.obj)

line level    source

   1          #include "types.h"
   2          #include "Common.h"
   3          #include "debugDef.h"
   4          #include "board.h"
   5          #include "global.h"
   6          #include "ms_reg.h"
   7          #include "ms_rwreg.h"
   8          #include "msosd.h"
   9          #include "NVRam.h"
  10          #include "i2c.h"
  11          #include "misc.h"
  12          #include "adjust.h"
  13          #include "userPref.h"
  14          #include "autofunc.h"
  15          #include "menudef.h"
  16          #include "menufunc.h"
  17          #include "msace.h"
  18          #include "msdlc.h"
  19          #include "msflash.h"
  20          #include "keypaddef.h"
  21          #include "mcu.h"
  22          #include "power.h"
  23          #include "GPIO_DEF.h"
  24          //BYTE SIORxBuffer[4];
  25          #include "gamma.h"
  26          #include "drvgpio.h"
  27          
  28          
  29          
  30          
  31          
  32          #if ENABLE_DEBUG 
              #if  ENABLE_DEBUG&&CHIP_ID==CHIP_TSUM2// 120403 coding, addition for eland uart debug
              extern void ElandWriteWord (WORD waddr, WORD wdata);
              extern WORD ElandReadWord (WORD waddr);
              extern BYTE ElandReadHalfWord(WORD ucaddr);
              extern Bool ElandWriteHalfWord (WORD ucaddr, BYTE ucdata);
              extern void mhal_mhl_SetHPD(Bool bflag);
              extern Bool ElandWriteWordMask(WORD reg, WORD val, WORD mask);
              #endif
              #endif
  42          #define DEBUG_Massage    0
  43          #if ENABLE_DEBUG&&DEBUG_Massage
                  #define DB_printData(str, value)   printData(str, value)
                  #define DB_printMsg(str)           printData(str, 1)
              #else
  47              #define DB_printData(str, value)
  48              #define DB_printMsg(str)
  49          #endif
  50          
  51          BYTE xdata SIORxIndex = 0;
  52          BYTE xdata ReSyncCounter;
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 2   

  53          //void printData(char *str, WORD value);
  54          //void printMsg(char *str);
  55          //void putSIOChar(unsigned char sendData);
  56          //BYTE xdata pReg[123];
  57          extern Bool xdata bFlashWriteFactory;
  58          #if DEBUG_VIRTUAL_KEY
              BYTE xdata KeyDebug=0xFF;
              #endif
  61          #if Enable_Gamma
              //extern void mStar_InitGamma(void);
              #endif
  64          extern void Power_PowerOffSystem(void);
  65          extern BYTE OT_WriteI2C(BYTE I2CAddr7Bit, BYTE *Buffer, BYTE BytesToSend);
  66          extern BYTE OT_ReadI2C(BYTE I2CAddr7Bit, BYTE *Buffer, BYTE BytesToRead);
  67          #if 1//ndef WH_REQUEST
  68          BYTE AOCAlign(void);
  69          #endif
  70          #if ENABLE_HDCP
  71              #if HDCPKEY_IN_Flash
  72                  extern WORD CRC16(BYTE nData, WORD nCRC);
  73              #endif
  74          #endif
  75          
  76          extern Bool NVRAM_i2c_SendByte(BYTE value);
  77          extern Bool ExecuteKeyEvent(MenuItemActionType menuAction);
  78          #if DEBUG_SELFTEST     
              #define FailAddr(Addr)     printData(#Addr" Fail[0x%x]", Addr)
              #define READ_LVDS_SSC_STEP() (msRead2Byte(REG_382E)) 
              #define READ_LVDS_SSC_SPAN() (msRead2Byte(REG_3830)) 
              #define READ_LPLL_SET() (((DWORD)msReadByte(REG_3820)<<16)|msRead2Byte(REG_381E))
              #define SSC_MODULATION()    ((float)429ul*1024ul*131072ul/READ_LVDS_SSC_SPAN()/READ_LPLL_SET())
              #define SSC_PERCENTAGE()    ((float)READ_LVDS_SSC_STEP()*READ_LVDS_SSC_SPAN()*1000ul/READ_LPLL_SET())
              
              void SelfTest(void)
              {
                  WORD wval;
                  
              #if 0
                  if(PanelTypeNumAddr <= ProductModeAddr)
                      FailAddr(PanelTypeNumAddr);
                  
                  if(PanelSettingAddr <= PanelTypeNumAddr)
                      FailAddr(PanelSettingAddr);
                  
                  if(FactorySettingAddr <= PanelSettingAddr)
                      FailAddr(FactorySettingAddr);
              #else
                  if(FactorySettingAddr <= ProductModeAddr)
                      FailAddr(FactorySettingAddr);
              #endif
              
                  if(MonitorSettingAddr <= FactorySettingAddr)
                      FailAddr(MonitorSettingAddr);
                  
                  if(ModeSettingAddr <= MonitorSettingAddr)
                      FailAddr(ModeSettingAddr);
                  
                  if(ModeInfoAddr <= ModeSettingAddr)
                      FailAddr(ModeInfoAddr);
                  
                  if(EndAddr <= ModeSettingAddr)
                      FailAddr(EndAddr);
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 3   

                  
                  if(BlacklitTimeAddr <= EndAddr)
                      FailAddr(BlacklitTimeAddr);
                  
                  if(CheckBoardAddr <= BlacklitTimeAddr)
                      FailAddr(CheckBoardAddr);
                  //printMsg("===EEPROM FINISH===");
              
                  wval = SSC_MODULATION();
                  if(wval > PANEL_SSC_MODULATION_DEF)
                      printData("SSC Fail Over40K:%d", wval);
                  
                  wval = SSC_PERCENTAGE();
                  if(wval > PANEL_SSC_PERCENTAGE_DEF)
                      printData("SSC Fail Over2:%d", wval);
                 // printMsg("===LVDS SSC FINISH===");
                  
              }
              #endif
 134          void ExecTestCommand( void )
 135          {
 136   1          BYTE ucTest = 0;
 137   1          BYTE ucPara1 = SIORxBuffer[2];
 138   1          BYTE ucPara2 = SIORxBuffer[3];
 139   1          BYTE ucPara3 = SIORxBuffer[4];
 140   1      
 141   1          switch( SIORxBuffer[1] )
 142   1          {        
 143   2              case 0x01:
 144   2      
 145   2                  MenuPageIndex=RootMenu;
 146   2      
 147   2                  MenuItemIndex=0;    
 148   2                  ExecuteKeyEvent(MIA_RedrawMenu);
 149   2                  break;
 150   2              case 0x02:
 151   2      
 152   2                  MenuPageIndex=RootMenu;
 153   2      
 154   2                  MenuItemIndex=0;    
 155   2                  ExecuteKeyEvent(MIA_RedrawMenu);
 156   2                  break;
 157   2           
 158   2              case 0x10:
 159   2              {
 160   3                  DB_printData("DB_MenuPageIndex:%d", MenuPageIndex);
 161   3                  DB_printData("DB_SrcInputType:%d", SrcInputType);
 162   3                  DB_printData("DB_OsdCounter:%d", OsdCounter);
 163   3                  DB_printData("DB_OsdTimeoutFlag:%d", OsdTimeoutFlag);
 164   3                  break;
 165   3              }
 166   2       #if Enable_Expansion
 167   2      
 168   2              case 0x09:
 169   2              {
 170   3                     // AdjustExpansionMode(0);
 171   3                      break;
 172   3              }
 173   2      #endif
 174   2      
 175   2      
 176   2      
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 4   

 177   2      
 178   2               case 0x50:
 179   2                  if( DebugOnlyFlag )
 180   2                  {
 181   3                      Clr_DebugOnlyFlag();
 182   3                      DB_printMsg( "<Free>");
 183   3                  }
 184   2                  else
 185   2                  {
 186   3                      Set_DebugOnlyFlag();
 187   3                      DB_printMsg( "<Debug>");
 188   3                  }
 189   2                  break;
 190   2      
 191   2      
 192   2      #if DEBUG_SELFTEST                
                          case 0x99:
                          {
                              SelfTest();
                              break;
                          }
              #endif    
 199   2      #if DEBUG_VIRTUAL_KEY
              
                              case 0x63: // Keypad_Enter
                              KeyDebug = KEY_EXIT;
                              printMsg("KEY_EXIT");
                              break;
                      case 0x72: // Keypad_LEFT
                              KeyDebug = KEY_MINUS;
                              printMsg("KEY_MINUS");
                              break;
                      
                      case 0x73: // Keypad_MENU
                              KeyDebug = KEY_MENU;
                              printMsg("KEY_MENU");
                              break;
                      
                      case 0x74: // Keypad_RIGHT
                              KeyDebug = KEY_PLUS;
                              printMsg("KEY_PLUS");
                              break;
                              
                      case 0x76: // Keypad_POWER
                              KeyDebug = KEY_POWER;
                              printMsg("KEY_POWER");
                              break;
              #endif
 225   2      
 226   2          }
 227   1      }
 228          
 229          void ProcessCommand(void)
 230          {
 231   1          switch( UART_CMD )
 232   1          {
 233   2              case kWrite_MST_Bank_n:
 234   2              {
 235   3      #if ENABLE_MHL && ENABLE_DEBUG&&CHIP_ID==CHIP_TSUM2// 120403 coding, addition for eland uart debug
                          if(UART_CMD_MS_BANK&0x80)
                          {
                              //ElandWriteHalfWord((UART_CMD_MS_BANK & 0x0F) << 8|UART_CMD_MS_REGINDEX, UART_CMD_MS_REGD
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 5   

             -ATA);
                          }
                          else
              #endif
 242   3                  {
 243   4                      const volatile BYTE ucBank = scReadByte( SC0_00 ); // store original bank
 244   4                      scWriteByte( SC0_00, UART_CMD_MS_BANK );
 245   4                      scWriteByte( UART_CMD_MS_REGINDEX, UART_CMD_MS_REGDATA );
 246   4                      scWriteByte( SC0_00, ucBank ); // restore original bank
 247   4                  }
 248   3                  putSIOChar( 0xF1 );
 249   3                  break;
 250   3              }
 251   2      
 252   2              case kRead_MST_Bank_n:
 253   2              {
 254   3      #if ENABLE_MHL && ENABLE_DEBUG&&CHIP_ID==CHIP_TSUM2// 120403 coding, addition for eland uart debug
                          if(UART_CMD_MS_BANK&0x80)
                          {
                              UART_CMD_MS_REGDATA = ElandReadHalfWord((UART_CMD_MS_BANK & 0x0F) << 8|UART_CMD_MS_REGINDE
             -X);
                          }
                          else
              #endif                    
 261   3                  {
 262   4                      const volatile BYTE ucBank = scReadByte( SC0_00 ); // store original bank
 263   4                      scWriteByte( SC0_00, UART_CMD_MS_BANK );
 264   4                      UART_CMD_MS_REGDATA = scReadByte( UART_CMD_MS_REGINDEX );
 265   4                      scWriteByte( SC0_00, ucBank ); // restore original bank
 266   4                  }
 267   3                  putSIOChar( 0xF2 );
 268   3                  putSIOChar( UART_CMD_MS_REGDATA );
 269   3                  break;
 270   3              }
 271   2      
 272   2              case kWrite_MCU_XDATA:
 273   2              {
 274   3                  msWriteByte( MAKEWORD( UART_CMD_MCU_IDX_H, UART_CMD_MCU_IDX_L ), UART_CMD_MCU_DATA );
 275   3                      putSIOChar( 0xF1 );
 276   3                  break;
 277   3              }
 278   2      
 279   2              case kRead_MCU_XDATA:
 280   2              {
 281   3                  UART_CMD_MCU_DATA = msReadByte( MAKEWORD( UART_CMD_MCU_IDX_H, UART_CMD_MCU_IDX_L ) );
 282   3                  putSIOChar( 0xF2 );
 283   3                  putSIOChar( UART_CMD_MCU_DATA );
 284   3                  break;
 285   3              }
 286   2      
 287   2              case kTest_Command:
 288   2              {
 289   3                  ExecTestCommand();
 290   3                  break;
 291   3              }
 292   2      #if !USEFLASH
                      case kWrite_EEPROM:
                      {
                          WORD uwEEADDR;
                          uwEEADDR = MAKEWORD(SIORxBuffer[1],SIORxBuffer[2]);
                          #if 0//ENABLE_HDCP
                          if (uwEEADDR>=RM_HDCP_KEY_BASEADDR1)
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 6   

                              g_wHDCP_KeyChkSum += g_UartCommand.Buffer[_UART_CMD_INDEX3_];
                          #endif // ENABLE_HDCP
                       
                                      NVRam_WriteByte(uwEEADDR, SIORxBuffer[3]);
              
                          //if (!g_bDebugASCIICommandFlag)
                              putSIOChar(0xF1);
                              //printData("EEPROM[0x%x]=", uwEEADDR);
                              //printData("0x%x \r\n", SIORxBuffer[_UART_CMD_INDEX3_]);
              
                          break;
                      }
                      case kRead_EEPROM:
                      {
                      WORD uwEEADDR;
                          uwEEADDR = MAKEWORD(SIORxBuffer[1],SIORxBuffer[2]);
                          //uwEEADDR = g_UartCommand.Buffer[_UART_CMD_INDEX1_] & 0x0E;
                          //uwEEADDR = (uwEEADDR << 7) + g_UartCommand.Buffer[_UART_CMD_INDEX2_];
                       
                                      NVRam_ReadByte(uwEEADDR , &SIORxBuffer[3]);
              
                          putSIOChar(0xF2);
                          putSIOChar(SIORxBuffer[3]);
                          //if (g_bDebugASCIICommandFlag)
                          //{
                              //printData("EEPROM[0x%x]=", uwEEADDR);
                              //printData("0x%x \r\n", SIORxBuffer[_UART_CMD_INDEX3_]);
                          //}
                          break;
                      }
              #endif
 330   2              default:
 331   2                  break;
 332   2          }
 333   1      }
 334          
 335          Bool GetCommand(void)
 336          {
 337   1          if( ReSyncCounter )
 338   1          {
 339   2      
 340   2              if( SIORxIndex > 2 && SIORxIndex == UART_CMD_LENGTH )
 341   2              {
 342   3                      Set_RxBusyFlag();
 343   3                      return TRUE;
 344   3              }
 345   2          }
 346   1          else if( SIORxIndex )
 347   1          {
 348   2              Clr_RxBusyFlag();
 349   2              SIORxIndex = 0;
 350   2          }
 351   1      
 352   1          return FALSE;
 353   1      
 354   1      }
 355          
 356          void DebugHandler(void)
 357          {
 358   1          if( !ES )
 359   1              return;
 360   1          if( GetCommand() )
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 7   

 361   1          {
 362   2              ProcessCommand();
 363   2              SIORxIndex = 0;
 364   2              Clr_RxBusyFlag();
 365   2          }
 366   1      }
 367          
 368          
 369          
 370          #define SIO_ID1     SIORxBuffer[0]
 371          #define SIO_TYPE1   SIORxBuffer[1]
 372          #define SIO_TYPE2   SIORxBuffer[2]
 373          #define SIO_CMD1    SIORxBuffer[3]
 374          #define SIO_CMD2    SIORxBuffer[4]
 375          #define SIO_DATA1   SIORxBuffer[5]
 376          #define SIO_DATA2   SIORxBuffer[6]
 377          #define SIO_DATA3       SIORxBuffer[7]
 378          #define SIOData10   (SIO_DATA1-0x30)*256
 379          #define SIOData11   ((SIO_DATA1-0x41)+10)*256
 380          #define SIOData20   (SIO_DATA2-0x30)*16
 381          #define SIOData21   ((SIO_DATA2-0x41)+10)*16
 382          #define SIOData30   (SIO_DATA3-0x30)
 383          #define SIOData31   (SIO_DATA3-0x41)+10
 384          //extern void Read6500KSetting(void);    //20050921  WMZ
 385          //extern void Read9300KSetting(void);
 386          //extern void ReadSRGBSetting(void);
 387          //extern Bool ResetAllSetting(void);
 388          //extern Bool SetToEnglish(void);
 389          //extern Bool SetToSimpleChinese(void);
 390          #if 1//ndef WH_REQUEST
 391          BYTE AOCAlign(void)
 392          {
 393   1          WORD sioData;
 394   1          if (SIO_ID1 == 'W')
 395   1          {
 396   2              // adjust
 397   2              if ((SIO_TYPE1 == '9') && (SIO_TYPE2 == '8'))
 398   2              {
 399   3                  // ascii to integer
 400   3                  sioData = ((SIO_DATA1 >= '0') && (SIO_DATA1 <= '9')) ? SIOData10 : SIOData11;
 401   3                  sioData += ((SIO_DATA2 >= '0') && (SIO_DATA2 <= '9')) ? SIOData20 : SIOData21;
 402   3                  sioData += ((SIO_DATA3 >= '0') && (SIO_DATA3 <= '9')) ? SIOData30 : SIOData31;
 403   3                  // red
 404   3                  if ((SIO_CMD1 == '0') && (SIO_CMD2 == '1'))
 405   3                  // R Gain
 406   3                  {
 407   4                      UserPrefRedColor = sioData; // for CT
 408   4                      // mStar_AdjustRedColor(UserPrefRedColor);
 409   4                      mStar_AdjustRedColor(UserPrefRedColor, UserPrefContrast);
 410   4                  }
 411   3                  // green
 412   3                  else if ((SIO_CMD1 == '0') && (SIO_CMD2 == '4'))
 413   3                  // G Gain
 414   3                  {
 415   4                      UserPrefGreenColor = sioData; // for CT
 416   4                      //mStar_AdjustGreenColor(UserPrefGreenColor);
 417   4                      mStar_AdjustGreenColor(UserPrefGreenColor, UserPrefContrast);
 418   4                  }
 419   3                  // blue
 420   3                  else if ((SIO_CMD1 == '0') && (SIO_CMD2 == '7'))
 421   3                  // B Gain
 422   3                  {
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 8   

 423   4                      UserPrefBlueColor = sioData; // for CT
 424   4                      // mStar_AdjustBlueColor(UserPrefBlueColor);
 425   4                      //mStar_AdjustBlueColor(UserPrefGreenColor,UserPrefContrast);
 426   4                      mStar_AdjustBlueColor(UserPrefBlueColor, UserPrefContrast); //0727
 427   4                  }
 428   3                  // contrast
 429   3                  else if ((SIO_CMD1 == '1') && (SIO_CMD2 == '4'))
 430   3                  // Contrast
 431   3                  {
 432   4                      UserPrefContrast = sioData;
 433   4                      //UserPrefContrast=((WORD)(MaxContrastValue-MinContrastValue))*UserPrefContrast/100+MinCon
             -trastValue;
 434   4                      UserPrefContrast = UserPrefContrast + MinContrastValue;
 435   4                      mStar_AdjustContrast(UserPrefContrast);
 436   4                  }
 437   3                  // black level
 438   3                  else if ((SIO_CMD1 == '1') && (SIO_CMD2 == '5'))
 439   3                  // Black level
 440   3                  {}
 441   3                  // brightness
 442   3                  else if ((SIO_CMD1 == '1') && (SIO_CMD2 == '6'))
 443   3                  // Brightness
 444   3                  {
 445   4                      UserPrefBrightness = sioData;
 446   4                      mStar_AdjustBrightness(UserPrefBrightness);
 447   4                  }
 448   3                  // reset language
 449   3                  else if ((SIO_CMD1 == 'R') && (SIO_CMD2 == 'L'))
 450   3                  // Black level
 451   3                  {
 452   4                      #if  LANGUAGE_TYPE == All14Language_AddJap              //120322 Modify
 453   4                                              if (sioData == 0x03)
 454   4                                                      {
 455   5                              UserPrefLanguage = LANG_France;
 456   5                                                      }
 457   4                          else if (sioData == 0x04)
 458   4                                                      {
 459   5                              UserPrefLanguage = LANG_German;
 460   5                                                      }
 461   4                          else if (sioData == 0x05)
 462   4                                                      {
 463   5                              UserPrefLanguage = LANG_Italian;
 464   5                                                      }
 465   4                          else if (sioData == 0x0A)
 466   4                                                      {
 467   5                              UserPrefLanguage = LANG_Spanish;
 468   5                                                      }
 469   4                          else if (sioData == 0x0B)
 470   4                                                      {
 471   5                              UserPrefLanguage = LANG_Swedish;
 472   5                                                      }
 473   4                          else if (sioData == 0x0D)
 474   4                                                      {
 475   5                              UserPrefLanguage = LANG_SChina;
 476   5                                                      }
 477   4                          else if (sioData == 0x1E)
 478   4                                                      {
 479   5                              UserPrefLanguage = LANG_Polish;
 480   5                                                      }
 481   4                              else if (sioData ==0x0E)
 482   4                                      {
 483   5                              UserPrefLanguage = LANG_Portugues;
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 9   

 484   5                                                      }
 485   4                          else if (sioData == 0x09)
 486   4                                                      {
 487   5                              UserPrefLanguage = LANG_Russia;
 488   5                                                      }
 489   4                          else if (sioData == 0x07)
 490   4                                                      {
 491   5                              UserPrefLanguage = LANG_Korea;
 492   5                                                      }
 493   4                          else if (sioData == 0x01)
 494   4                                                      {
 495   5                              UserPrefLanguage = LANG_TChina;
 496   5                                                      }
 497   4                              else if (sioData == 0x12)
 498   4                                      {
 499   5                              UserPrefLanguage = LANG_Czech;
 500   5                                                      }
 501   4                          else
 502   4                          // default
 503   4                                              {
 504   5                              UserPrefLanguage = LANG_English;
 505   5                                                      }
 506   4      
 507   4      
 508   4                      #endif
 509   4                       #if !USEFLASH
                                                   NVRam_WriteByte(nvrMonitorAddr(Language), UserPrefLanguage);
                               #else
 512   4                                          UserPref_EnableFlashSaveBit(bFlashSaveMonitorBit);                    
             -                
 513   4                       #endif
 514   4                  }
 515   3              }
 516   2              // save & recall color temperature
 517   2              else if ((SIO_TYPE1 == 'A') && (SIO_TYPE2 == '0'))
 518   2              {
 519   3                  //  save cool
 520   3                  if ((SIO_CMD1 == 'C') && (SIO_CMD2 == '1'))
 521   3                  {
 522   4                      UserPrefColorTemp = CTEMP_Cool1;
 523   4                      UserPrefRedColorCool1 = UserPrefRedColor;
 524   4                      UserPrefGreenColorCool1 = UserPrefGreenColor;
 525   4                      UserPrefBlueColorCool1 = UserPrefBlueColor;
 526   4      
 527   4                      
 528   4                      #if USEFLASH
 529   4                      UserPref_EnableFlashSaveBit(bFlashSaveMonitorBit|bFlashSaveFactoryBit);                   
             - 
 530   4                      #else
                              SaveFactorySetting();
                              SaveMonitorSetting();
                              #endif
 534   4                      
 535   4                      //NVRam_WriteByte(Factory9300KContrastAddr, UserPrefContrast);
 536   4                      //NVRam_WriteByte(Factory9300KBrightnessAddr, UserPrefBrightness);
 537   4                  }
 538   3                  // save warm
 539   3                  else if ((SIO_CMD1 == 'A') && (SIO_CMD2 == '8'))
 540   3                  {
 541   4                      UserPrefColorTemp = CTEMP_Warm1;
 542   4                      UserPrefRedColorWarm1 = UserPrefRedColor;
 543   4                      UserPrefGreenColorWarm1 = UserPrefGreenColor;
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 10  

 544   4                      UserPrefBlueColorWarm1 = UserPrefBlueColor;
 545   4      
 546   4                      
 547   4                      #if USEFLASH
 548   4                      UserPref_EnableFlashSaveBit(bFlashSaveMonitorBit|bFlashSaveFactoryBit);                   
             - 
 549   4                      #else
                              SaveFactorySetting();
                              SaveMonitorSetting();
                              #endif
 553   4                      
 554   4                      //NVRam_WriteByte(Factory6500KContrastAddr, UserPrefContrast);
 555   4                      //NVRam_WriteByte(Factory6500KBrightnessAddr, UserPrefBrightness);
 556   4                  }
 557   3                              #if CT_7500K_ENABLE
                          // save normal:
                          else if ((SIO_CMD1 == 'A') && (SIO_CMD2 == '5'))
                          {
                              UserPrefColorTemp = CTEMP_Normal;
                              UserPrefRedColorNormal = UserPrefRedColor;
                              UserPrefGreenColorNormal = UserPrefGreenColor;
                              UserPrefBlueColorNormal = UserPrefBlueColor;
              
                              
                              #if USEFLASH
                              UserPref_EnableFlashSaveBit(bFlashSaveMonitorBit|bFlashSaveFactoryBit);                   
             - 
                              #else
                              SaveFactorySetting();
                              SaveMonitorSetting();
                              #endif
                              
                              //NVRam_WriteByte(FactorySRGBContrastAddr, UserPrefContrast);
                              //NVRam_WriteByte(FactorySRGBBrightnessAddr, UserPrefBrightness);
                          }
                                      #endif
 578   3                              #if CT_sRGB_ENABLE
                          // save sRGB:
                          else if ((SIO_CMD1 == 'C') && (SIO_CMD2 == 'S'))
                          {
                              UserPrefColorTemp = CTEMP_SRGB;
                              UserPrefRedColorSRGB = UserPrefRedColor;
                              UserPrefGreenColorSRGB = UserPrefGreenColor;
                              UserPrefBlueColorSRGB = UserPrefBlueColor;
                              
                              #if USEFLASH
                              UserPref_EnableFlashSaveBit(bFlashSaveMonitorBit|bFlashSaveFactoryBit);                   
             - 
                              #else
                              SaveFactorySetting();
                              SaveMonitorSetting();
                              #endif
                              
                              //NVRam_WriteByte(FactorySRGBContrastAddr, UserPrefContrast);
                              //NVRam_WriteByte(FactorySRGBBrightnessAddr, UserPrefBrightness);
                          }
                                      #endif
 598   3                  // recall cool
 599   3                  else if ((SIO_CMD1 == 'B') && (SIO_CMD2 == '9'))
 600   3                  {
 601   4                      UserPrefColorTemp = CTEMP_Cool1;
 602   4                      UserPrefRedColor = UserPrefRedColorCool1;
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 11  

 603   4                      UserPrefGreenColor = UserPrefGreenColorCool1;
 604   4                      UserPrefBlueColor = UserPrefBlueColorCool1;
 605   4                      ReadColorTempSetting(); // 2006/11/10 6:59PM by KK  ReadCool1Setting();
 606   4                      mStar_AdjustBrightness(UserPrefBrightness);
 607   4                      mStar_AdjustContrast(UserPrefContrast);
 608   4                  }
 609   3                  // recall warm
 610   3                  else if ((SIO_CMD1 == 'B') && (SIO_CMD2 == '8'))
 611   3                  {
 612   4                      UserPrefColorTemp = CTEMP_Warm1;
 613   4                      UserPrefRedColor = UserPrefRedColorWarm1;
 614   4                      UserPrefGreenColor = UserPrefGreenColorWarm1;
 615   4                      UserPrefBlueColor = UserPrefBlueColorWarm1;
 616   4                      ReadColorTempSetting(); // 2006/11/10 6:59PM by KK ReadWarm1Setting();
 617   4                      mStar_AdjustBrightness(UserPrefBrightness);
 618   4                      mStar_AdjustContrast(UserPrefContrast);
 619   4                  }
 620   3      #if CT_7500K_ENABLE
                          // recall normal
                          else if ((SIO_CMD1 == 'B') && (SIO_CMD2 == '6'))
                          {
                              UserPrefColorTemp = CTEMP_Normal;
                              UserPrefRedColor = UserPrefRedColorNormal;
                              UserPrefGreenColor = UserPrefGreenColorNormal;
                              UserPrefBlueColor = UserPrefBlueColorNormal;
                              ReadColorTempSetting(); // 2006/11/10 6:59PM by KK ReadNormalSetting();
                              mStar_AdjustBrightness(UserPrefBrightness);
                              mStar_AdjustContrast(UserPrefContrast);
                          }
              #endif
 633   3                  // 20050114 wumaozhong
 634   3                  #if SRGB
 635   3                              #if CT_sRGB_ENABLE
                              else if ((SIO_CMD1 == 'B') && (SIO_CMD2 == 'S'))
                              {
                                  UserPrefColorTemp = CTEMP_SRGB;
                                  UserPrefRedColor = UserPrefRedColorSRGB;
                                  UserPrefGreenColor = UserPrefGreenColorSRGB;
                                  UserPrefBlueColor = UserPrefBlueColorSRGB;
                                  ReadColorTempSetting(); // 2006/11/10 6:59PM by KK ReadSRGBSetting();
                                  mStar_AdjustBrightness(UserPrefBrightness);
                                  mStar_AdjustContrast(UserPrefContrast);
                              }
                                      #endif
 647   3                  #endif
 648   3                  else if (SIO_CMD1 == 'B' && SIO_CMD2 == '5')
 649   3                  // Reset
 650   3                  {
 651   4                      ResetAllSetting();
 652   4                  }
 653   3              }
 654   2              else if (SIO_TYPE1 == 'F')
 655   2              {
 656   3                  sioData = ((SIO_DATA1 >= '0') && (SIO_DATA1 <= '9')) ? SIOData10 : SIOData11;
 657   3                  sioData += ((SIO_DATA2 >= '0') && (SIO_DATA2 <= '9')) ? SIOData20 : SIOData21;
 658   3                  sioData += ((SIO_DATA3 >= '0') && (SIO_DATA3 <= '9')) ? SIOData30 : SIOData31;
 659   3                  if (SIO_TYPE2 == '0')
 660   3                  {
 661   4                      if (SIO_CMD1 == '0' && SIO_CMD2 == '1')
 662   4                      {
 663   5                          if (mStar_AutoColor())
 664   5                          {
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 12  

 665   6                              #if USEFLASH
 666   6                                  UserPref_EnableFlashSaveBit(bFlashSaveFactoryBit);     
 667   6                              #else
                                                 SaveFactorySetting();
                                         //  SaveMonitorSetting();
                                     #endif
 671   6                          }
 672   5                      }
 673   4                      else if (SIO_CMD1 == '0' && SIO_CMD2 == '2')
 674   4                      {
 675   5                          if (mStar_AutoGeomtry())
 676   5                          {
 677   6                              #if USEFLASH
 678   6                           UserPref_EnableFlashSaveBit(bFlashSaveModeBit); 
 679   6                              #else
                                      SaveModeSetting();
                                      #endif
 682   6                          }
 683   5                      }
 684   4                  }
 685   3                  else if (SIO_TYPE2 == '3')
 686   3                  {
 687   4                      if (SIO_CMD1 == '0' && SIO_CMD2 == '0')
 688   4                      {
 689   5                          Clr_BurninModeFlag();
 690   5                       #if !USEFLASH
                                                                                NVRam_WriteByte(nvrMonitorAddr(MonitorFlag), MonitorFlags);
                               #else
 693   5                                                                        UserPref_EnableFlashSaveBit(bFlashSaveMonitorBit);   
 694   5                       #endif
 695   5                      }
 696   4                      else if (SIO_CMD1 == '0' && SIO_CMD2 == '1')
 697   4                      {
 698   5                          Set_BurninModeFlag();
 699   5                       #if !USEFLASH
                                                                                NVRam_WriteByte(nvrMonitorAddr(MonitorFlag), MonitorFlags);
                               #else
 702   5                                                                        UserPref_EnableFlashSaveBit(bFlashSaveMonitorBit); 
 703   5                       #endif
 704   5                      }
 705   4                      else if (SIO_CMD1 == '0' && SIO_CMD2 == '4')
 706   4                      {
 707   5                          #if  LANGUAGE_TYPE == All14Language_AddJap          //120322 Modify
 708   5                                              if (sioData == 0x03)
 709   5                                                      {
 710   6                              UserPrefLanguage = LANG_France;
 711   6                                                      }
 712   5                          else if (sioData == 0x04)
 713   5                                                      {
 714   6                              UserPrefLanguage = LANG_German;
 715   6                                                      }
 716   5                          else if (sioData == 0x05)
 717   5                                                      {
 718   6                              UserPrefLanguage = LANG_Italian;
 719   6                                                      }
 720   5                          else if (sioData == 0x0A)
 721   5                                                      {
 722   6                              UserPrefLanguage = LANG_Spanish;
 723   6                                                      }
 724   5                          else if (sioData == 0x0B)
 725   5                                                      {
 726   6                              UserPrefLanguage = LANG_Swedish;
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 13  

 727   6                                                      }
 728   5                          else if (sioData == 0x0D)
 729   5                                                      {
 730   6                              UserPrefLanguage = LANG_SChina;
 731   6                                                      }
 732   5                          else if (sioData == 0x1E)
 733   5                                                      {
 734   6                              UserPrefLanguage = LANG_Polish;
 735   6                                                      }
 736   5                              else if (sioData ==0x08)
 737   5                                      {
 738   6                              UserPrefLanguage = LANG_Portugues;
 739   6                                                      }
 740   5                          else if (sioData == 0x09)
 741   5                                                      {
 742   6                              UserPrefLanguage = LANG_Russia;
 743   6                                                      }
 744   5                          else if (sioData == 0x07)
 745   5                                                      {
 746   6                              UserPrefLanguage = LANG_Korea;
 747   6                                                      }
 748   5                          else if (sioData == 0x01)
 749   5                                                      {
 750   6                              UserPrefLanguage = LANG_TChina;
 751   6                                                      }
 752   5                              else if (sioData == 0x12)
 753   5                                      {
 754   6                              UserPrefLanguage = LANG_Czech;
 755   6                                                      }
 756   5                          else
 757   5                          // default
 758   5                                              {
 759   6                              UserPrefLanguage = LANG_English;
 760   6                                                      }
 761   5      
 762   5                          #endif
 763   5                     #if !USEFLASH
                                                                      NVRam_WriteByte(nvrMonitorAddr(Language), UserPrefLanguage);
                             #else
 766   5                                                              UserPref_EnableFlashSaveBit(bFlashSaveMonitorBit); 
 767   5                     #endif
 768   5                      }
 769   4                      else if (SIO_CMD1 == 'P' && SIO_CMD2 == 'M'&& SIO_DATA1 =='O')
 770   4                    {
 771   5                              #if USEFLASH
 772   5                              FactoryProductModeValue=ProductModeOnValue;
 773   5                              UserPref_EnableFlashSaveBit(bFlashSaveFactoryBit); 
 774   5                              #else
                                      //WORD temp=ProductModeOnValue;
                                      //NVRam_WriteTbl(ProductModeAddr, (BYTE*)(&temp), 2);
                                      NVRam_WriteWord(ProductModeAddr,ProductModeOnValue);
                                      #endif
 779   5                    }
 780   4                  }
 781   3                  else if (SIO_TYPE2 == '5')
 782   3                  {
 783   4                      if (SIO_CMD1 == '0' && SIO_CMD2 == '0')
 784   4                      {
 785   5                       #if USEFLASH
 786   5                       #else
                                      SaveBlacklitTime();
                               #endif
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 14  

 789   5                      }
 790   4                  }
 791   3                  else if (SIO_TYPE2 == '7')
 792   3                  {
 793   4                      if (SIO_CMD1 == '0' && SIO_CMD2 == '1')
 794   4                      {
 795   5                          //Set_ISPFlag();
 796   5                      }
 797   4                  }
 798   3                  else if (SIO_TYPE2 == '9')
 799   3                  {
 800   4                      if (SIO_CMD1 == 'E' && SIO_CMD2 == 'N')
 801   4                      {
 802   5                          Set_FactoryModeFlag();
 803   5                          Set_AutoColorFlag();
 804   5                          UserPrefContrast=DefContrast;
 805   5                          UserPrefBrightness = DefBrightness;
 806   5                          UserPrefECOMode = ECO_Standard;
 807   5                              #if Enable_Gamma
                                          UserPrefGamaMode = GAMA1;
                                          mStar_SetupGamma( GAMA1 );
                                      #endif
 811   5                          UserPrefDcrMode = 0;
 812   5                                              #if Enable_YCM_Mode
                                  UserPrefYColor = DefColor;
                                  UserPrefCColor = DefColor;
                                  UserPrefMColor = DefColor;
                                                      #endif
 817   5                          UserPrefRedColorUser = DefColor;
 818   5                          UserPrefGreenColorUser = DefColor;
 819   5                          UserPrefBlueColorUser = DefColor;
 820   5                                              #if MWEFunction
 821   5                          UserPrefHue = 50;
 822   5                          UserPrefSaturation = 0x80;
 823   5                          UserPrefSubContrast = DefSubContrast;
 824   5                          UserPrefSubBrightness = DefSubBrightness;
 825   5          
 826   5                          msAdjustSharpness(SUB_WINDOW, 11, 1);
 827   5                                              msAdjustSubBrightness( SUB_WINDOW, UserPrefSubBrightness, UserPrefSubBrightness, UserPrefSubBrightnes
             -s );
 828   5                                              msAdjustVideoContrast( SUB_WINDOW, DefContrastBase + UserPrefContrast );
 829   5                                              msAdjustVideoHue( SUB_WINDOW, UserPrefHue );
 830   5                                              msAdjustVideoSaturation( SUB_WINDOW, UserPrefSaturation );
 831   5                                              #endif
 832   5                          mStar_AdjustContrast(UserPrefContrast);
 833   5                          mStar_AdjustBrightness(UserPrefBrightness);
 834   5                              #if USEFLASH
 835   5                          UserPref_EnableFlashSaveBit(bFlashSaveMonitorBit); 
 836   5                              #else
                                      SaveMonitorSetting();
                                      #endif
 839   5                      }
 840   4                      else if (SIO_CMD1 == '0' && SIO_CMD2 == 'E')
 841   4                      {
 842   5                          Clr_FactoryModeFlag();
 843   5                      }
 844   4                  }
 845   3                  else if (SIO_TYPE2 == 'B')//  //'W' 'F'     'B'     'P'     'D'     '0'     '0'     '0'
 846   3                  {
 847   4                      if (SIO_CMD1 == 'P' && SIO_CMD2 == 'D'&& SIO_DATA1 =='0')//Power Down
 848   4                      {
 849   5                          Power_PowerOffSystem();
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 15  

 850   5                        Power_TurnOnAmberLed();
 851   5                      }
 852   4                  }
 853   3      
 854   3              }
 855   2              #if ENABLE_HDCP
 856   2                  #if HDCPKEY_IN_Flash//Zhifeng.Wu 20071127
 857   2                      else if (SIO_TYPE1 == 'H' && SIO_TYPE2 == 'S')
 858   2                      {
 859   3                          if ((SIO_CMD1 == 'T') && (SIO_CMD2 == 'R'))
 860   3                          {
 861   4                              // HDCP WRITE START
 862   4                              #if 0//DetectSystemVcc
                                      #if UseWDT
                                      DisableWDT();
                                      #endif
                                      #endif
 867   4                              Set_WriteHDCPcodeFlag();
 868   4      
 869   4                              TCRCvalue = 0;
 870   4                              //Flash_Erase_FreeBuffer(FLASH_KEY_HDCP,0); // jeff add it in 2009 0907
 871   4                              bFlashWriteFactory = TRUE;
 872   4                              
 873   4                                 #if 0//Enable_Cache
                                      MCU_DisableCache();
                                      #endif
 876   4      
 877   4                              FlashSectorErase(TRUE, HDCPKEYSET_START);
 878   4                              FlashDisableWP(HDCPKEYSET_START);
 879   4                              
 880   4                                                      Power_TurnOffLed();
 881   4                                                      
 882   4                          }
 883   3                      }
 884   2                      else if (SIO_TYPE1 == 'H' && WriteHDCPcodeFlag)
 885   2                      // WRITE HDCP DATA
 886   2                      {
 887   3                      #if 0
                                  WORD wTemp;
                                  if(SIO_TYPE2 < (HDCPKEY_SIZE/HDCP_BLOCK_LENGTH))
                                      Flash_Write_Factory_KeySet(FLASH_KEY_HDCP, SIO_TYPE2, HDCP_BLOCK_LENGTH,(BYTE*) &S
             -IORxBuffer[3], HDCP_BLOCK_LENGTH);
                                  else if(SIO_TYPE2 == (HDCPKEY_SIZE/HDCP_BLOCK_LENGTH))
                                  {
                                      Flash_Write_Factory_KeySet(FLASH_KEY_HDCP, SIO_TYPE2, HDCP_BLOCK_LENGTH,(BYTE*) &S
             -IORxBuffer[3], HDCPKEY_SIZE%HDCP_BLOCK_LENGTH);
                                      for(wTemp=0; wTemp<HDCPKEY_SIZE; wTemp++)
                                      {
                                          TCRCvalue = CRC16(FlashReadByte(HDCPKEYSET_START+wTemp), TCRCvalue);
                                      }
                                                      Set_LoadHDCPKeyFlag();
                                                      hw_SetGreenLed();
                                  }
                                #else
 902   3                              BYTE i;
 903   3                          for (i = 0; i < HDCP_BLOCK_LENGTH; i++)
 904   3                          {//SIO_TYPE2==HDCP BANK NO    SIORxBuffer[3+i]==HDCP DATA
 905   4                              if(HDCP_BLOCK_LENGTH*SIO_TYPE2+i<HDCPKEY_SIZE)
 906   4                              {
 907   5                                  FlashHDCPWriteByte((HDCPKEYSET_START+HDCP_BLOCK_LENGTH*SIO_TYPE2+i),SIORxBuffe
             -r[3+i]);
 908   5                                  TCRCvalue = CRC16(FlashReadByte(HDCPKEYSET_START+HDCP_BLOCK_LENGTH*SIO_TYPE2+i
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 16  

             -), TCRCvalue);
 909   5                              }
 910   4                          }
 911   3                         
 912   3                          if (SIO_TYPE2==HDCPKEY_SIZE/HDCP_BLOCK_LENGTH)//HDCP WRITE END
 913   3                          {
 914   4                              Set_LoadHDCPKeyFlag();
 915   4                              bFlashWriteFactory = FALSE;
 916   4                              FlashEnableWP();
 917   4                                #if 0//Enable_Cache
                                     MCU_EnableCache();
                                     #endif
 920   4      
 921   4                              Power_TurnOnGreenLed();
 922   4                          }
 923   3                        #endif
 924   3                      }
 925   2                  #endif
 926   2              #endif
 927   2          }
 928   1          else if ((SIO_TYPE1 == 'V') && (SIO_TYPE2 == 'K'))
 929   1          {
 930   2              sioData = ((SIO_DATA1 >= '0') && (SIO_DATA1 <= '9')) ? SIOData10 : SIOData11;
 931   2              sioData += ((SIO_DATA2 >= '0') && (SIO_DATA2 <= '9')) ? SIOData20 : SIOData21;
 932   2              sioData += ((SIO_DATA3 >= '0') && (SIO_DATA3 <= '9')) ? SIOData30 : SIOData31;
 933   2              gByteVisualKey = 0xff;
 934   2              if ((SIO_CMD1 == '0') && (SIO_CMD2 == '0'))
 935   2              {
 936   3                  if (sioData < 16)
 937   3                  {
 938   4                      if (((SIO_DATA3 >= '0') && (SIO_DATA3 <= '9')) || ((SIO_DATA3 >= 'A') && (SIO_DATA3 >= 'F'
             -)))
 939   4                      {
 940   5                          if (SIO_DATA3 == '0')
 941   5                          {
 942   6                              gByteVisualKey &= ~KEY_EXIT;
 943   6                          }
 944   5                          else if (SIO_DATA3 == '1')
 945   5                          {
 946   6                              gByteVisualKey &= ~KEY_PLUS;
 947   6                          }
 948   5                          else if (SIO_DATA3 == '2')
 949   5                          {
 950   6                              gByteVisualKey &= ~KEY_MINUS;
 951   6                          }
 952   5                          else if (SIO_DATA3 == '3')
 953   5                          {
 954   6                              gByteVisualKey &= ~KEY_MENU;
 955   6                          }
 956   5                          else if (SIO_DATA3 == '4')
 957   5                          {
 958   6                              gByteVisualKey &= ~KEY_POWER;
 959   6                          }
 960   5                          else
 961   5                              gByteVisualKey = 0xff;
 962   5                      }
 963   4                  }
 964   3                  else if ((SIO_DATA1 == '0') && (sioData > 16)){}
 965   3                  gBoolVisualKey = 1;
 966   3              } //End Virual  key
 967   2          }
 968   1          return SIORxIndex;
C51 COMPILER V9.01   DEBUG                                                                 03/09/2023 15:39:20 PAGE 17  

 969   1      }
 970          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2477    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
