C51 COMPILER V9.01   PROPFONT                                                              03/09/2023 15:39:10 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE PROPFONT
OBJECT MODULE PLACED IN .\obj\PropFont.obj
COMPILER INVOKED BY: D:\Keil4\C51\BIN\C51.EXE ..\..\UI\HkcOsd\PropFont.c OPTIMIZE(SIZE) BROWSE INCDIR(..\..\DRIVER\INC;.
                    -.\..\KERNEL\SCALER\INC;..\..\KERNEL\SYSTEM\INC;..\..\LIB\INC;..\..\PANEL\INC;..\..\BOARD;..\..\DRIVER\INC;..\..\KERNEL\S
                    -YSTEM\INC\AOC2011;..\..\DRIVER\extDEVICE\INC;..\..\MODEL;..\..\CONFIG;..\..\PANEL;..\..\UI\F_LOGO\INC;..\..\UI\HkcOsd\IN
                    -C) DEFINE(ModelName=JRY_TESTBOARD_C_BOARD) DEBUG OBJECTEXTEND PRINT(.\list\PropFont.lst) OBJECT(.\obj\PropFont.obj)

line level    source

   1          #include <stdlib.h>
   2          #include "types.h"
   3          #include "ms_reg.h"
   4          #include "panel.h"
   5          #include "Board.h"
   6          #include "debug.h"
   7          #include "ms_rwreg.h"
   8          #include "mstar.h"
   9          #include "misc.h"
  10          #include "global.h"
  11          #include "menudef.h"
  12          //#include "font.h"
  13          #include "extlib.h"
  14          
  15          
  16          #if PropFontNewData
  17          #include "PropFontAllLanguage_new.h"
  18          #include "MenuFontTbl_new.h"
  19          #else
              #include "PropFontAllLanguage.h"
              #include "MenuFontTbl.h"
              #endif
  23          
  24          
  25          
  26          
  27          extern BYTE  xdata MenuPageIndex;
  28          
  29          #include "loadpropfont1218.h"
  30          #include "msOSD.h"
  31          #include "drvOSD.h"
  32          
  33          #if CHIP_ID>=CHIP_TSUMV
  34          
  35          void Osd_DynamicLoadFont( BYTE addr, BYTE *fontPtr, WORD num )
  36          {
  37   1              TotalFontWidth = 0;
  38   1              OSD_WRITE_FONT_ADDRESS(addr);
  39   1              LoadCompressedPropFonts( fontPtr, num );
  40   1      }
  41          #else
              
              void Osd_DynamicLoadFont( BYTE  addr, BYTE *fontPtr, WORD num )
              {
                      TotalFontWidth = 0;
              /*      
                      if(( addr & 0xFF00 ) == 0x100 )
                          {
                              OSD_FONT_HI_ADDR_SET_BIT8();
                          }
                      else if(( addr & 0xFF00 ) == 0x200 )
                          {
C51 COMPILER V9.01   PROPFONT                                                              03/09/2023 15:39:10 PAGE 2   

                              OSD_FONT_HI_ADDR_SET_BIT9();
                          }
                      else if(( addr & 0xFF00 ) == 0x300 )
                          {
                              OSD_FONT_HI_ADDR_SET_BIT10();
                          }
                      else
                          {
                              OSD_FONT_HI_ADDR_CLR_TO_0();
                          }
              */
              
                      
                     OSD_WRITE_FONT_ADDRESS(addr & 0xFF);
                     LoadCompressedPropFonts( fontPtr, num );
                  
                      //OSD_FONT_CLEAR();
              }
              #endif
  72          
  73          
  74          #if ENABLE_OVER_SCAN
              
              #define ImageRatioStatusAddr    0xA8
              void DynamicLoadFont_RatioStatus(void)
              {
                      if( UserprefExpansionMode == Expansion_Aspect && ExpansionFlag )
                      {
                          Osd_DynamicLoadFont( ImageRatioStatusAddr, MenuPage62[UserPrefLanguage].Fonts, MenuPage62[User
             -PrefLanguage].FontCount );
                      }
              #if ENABLE_OVER_SCAN
                      else if( UserprefExpansionMode == Expansion_11)// && !INPUT_IS_NATIVE_TIMING() )   //121228 Modify
                      {
                          Osd_DynamicLoadFont( ImageRatioStatusAddr, MenuPage63[UserPrefLanguage].Fonts, MenuPage63[User
             -PrefLanguage].FontCount );
                      }
                      else if( UserprefExpansionMode == PIC_FORMAT_17Picth)// && !INPUT_IS_NATIVE_TIMING() ) //121228 Mo
             -dify
                      {
                          Osd_DynamicLoadFont( ImageRatioStatusAddr, MenuPage64[UserPrefLanguage].Fonts, MenuPage64[User
             -PrefLanguage].FontCount );
                      }
                      else if( UserprefExpansionMode == PIC_FORMAT_19Picth)// && !INPUT_IS_NATIVE_TIMING() ) //121228 Mo
             -dify
                      {
                          Osd_DynamicLoadFont( ImageRatioStatusAddr, MenuPage65[UserPrefLanguage].Fonts, MenuPage65[User
             -PrefLanguage].FontCount );
                      }
                      else if( UserprefExpansionMode == PIC_FORMAT_W19Picth)// && !INPUT_IS_NATIVE_TIMING() )    //12122
             -8 Modify
                      {
                          Osd_DynamicLoadFont( ImageRatioStatusAddr, MenuPage66[UserPrefLanguage].Fonts, MenuPage66[User
             -PrefLanguage].FontCount );
                      }
                      else if( UserprefExpansionMode == PIC_FORMAT_W21_5Picth)// && !INPUT_IS_NATIVE_TIMING() )  //12122
             -8 Modify
                      {
                          Osd_DynamicLoadFont( ImageRatioStatusAddr, MenuPage67[UserPrefLanguage].Fonts, MenuPage67[User
             -PrefLanguage].FontCount );
                      }
                      else if( UserprefExpansionMode == PIC_FORMAT_W22Picth)// && !INPUT_IS_NATIVE_TIMING() )    //12122
C51 COMPILER V9.01   PROPFONT                                                              03/09/2023 15:39:10 PAGE 3   

             -8 Modify
                      {
                          Osd_DynamicLoadFont( ImageRatioStatusAddr, MenuPage68[UserPrefLanguage].Fonts, MenuPage68[User
             -PrefLanguage].FontCount );
                      }
                      else if( UserprefExpansionMode == PIC_FORMAT_W23Picth)// && !INPUT_IS_NATIVE_TIMING() )    //12122
             -8 Modify
                      {
                          Osd_DynamicLoadFont( ImageRatioStatusAddr, MenuPage69[UserPrefLanguage].Fonts, MenuPage69[User
             -PrefLanguage].FontCount );
                      }
              #endif
                      else
                      {
                          Osd_DynamicLoadFont( ImageRatioStatusAddr, MenuPage61[UserPrefLanguage].Fonts, MenuPage61[User
             -PrefLanguage].FontCount );
                      }
              
              }
              
              #endif
 121          
 122          
 123          void DynamicLoadFont(MenuFontType *menuFonts)
 124          {
 125   1      
 126   1          if (menuFonts->Fonts)
 127   1         #if !AdjustLanguageFunction          
                         if(MenuPageIndex == LanguageMenu)    
                              Osd_DynamicLoadFont(PropFontAddress, (BYTE*)(menuFonts->Fonts), menuFonts->FontCount);
                         else
                 #endif               
 132   1                      Osd_DynamicLoadFont(PropFontAddress, (BYTE*)((menuFonts + UserPrefLanguage)->Fonts), (menuFonts + U
             -serPrefLanguage)->FontCount); 
 133   1      }
 134          
 135          
 136          void LoadLanguageStatusPropfont( void )
 137          {
 138   1              if(MenuPageIndex!=FactoryMenu)
 139   1              Osd_DynamicLoadFont( PropFontAddress, MenuPage4[UserPrefLanguage].Fonts, MenuPage4[UserPrefLanguage].
             -FontCount );
 140   1              Osd_DynamicLoadFont( MainAddress, MenuPage7[UserPrefLanguage].Fonts, MenuPage7[UserPrefLanguage].FontCoun
             -t );
 141   1      #if AdjustLanguageFunction
 142   1              Osd_DynamicLoadFont( LanguageAddress, MenuPage8[UserPrefLanguage].Fonts, MenuPage8[UserPrefLanguage].Font
             -Count );
 143   1      #endif
 144   1      
 145   1      }
 146          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    321    ----
   CONSTANT SIZE    =  23521    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.01   PROPFONT                                                              03/09/2023 15:39:10 PAGE 4   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
